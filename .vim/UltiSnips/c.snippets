priority -50

# Main ===================================================================={{{

snippet main "main with args"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet mainn "main void"
int main(void)
{
	${VISUAL}${0}
	return 0;
}
endsnippet

# }}}

# Preprocessor ============================================================{{{

snippet inc "#include standard header"
#include <${1:stdio}.h>
endsnippet

snippet Inc "#include local header"
#include "${1:`!p snip.rv = snip.basename`.h}"
endsnippet

snippet def "#define ..." b
#define ${1}
endsnippet

snippet once "Include header once only guard" b
#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

# }}}

# Control Statements ======================================================{{{

snippet if "if ..."
if (${1:/* condition */})
{
	${VISUAL}${2}
}${0}
endsnippet

snippet el "else ..."
else
{
	${VISUAL}${1}
}${0}
endsnippet

snippet elif "else if ..."
else if (${1:/* condition */})
{
	${VISUAL}${2}
}${0}
endsnippet

snippet ter "tertiary operator"
((${VISUAL}${1:/* condition */}) ? ${2:a} : ${3:b})${0}
endsnippet

snippet switch "switch statement"
switch (${VISUAL}${1:/* variable */})
{
	case ${2:/* variable case */}:
	{
		${3}
		${4:break;}
	}${5}
	default:
	{
		${6}
	}
}${0}
endsnippet

snippet case "case label"
case ${1:/* variable case */}:
{
	${2}
}${0}
endsnippet

snippet ret "return ..."
return ${0}
endsnippet

# }}}

# Loops ==================================================================={{{

snippet fori "typical for"
for (${2:i} = ${3:0}; $2 < ${1:count}; ${4:++$2})
{
	${VISUAL}${5}
}${0}
endsnippet

snippet for "blank for"
for (${2}; ${1}; ${3})
{
	${VISUAL}${5}
}${0}
endsnippet

snippet wh "while"
while (${1:/* condition */})
{
	${2}
}${0}
endsnippet

snippet do "do ... while"
do
{
	${2}
} while (${1:/* condition */});
endsnippet

# }}}

# Functions ==============================================================={{{

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

# }}}

# Types ==================================================================={{{

snippet td "typedef"
typedef ${1:int} ${2:MyCustomType};${0}
endsnippet

snippet struct "struct"
struct ${1:name}
{
	${2:/* data */}
};${0}
endsnippet

snippet tds "typedef struct"
typedef struct ${1:name}
{
	${2:/* data */}
} $1;${0}
endsnippet

snippet enum "enum"
enum ${1:name}
{
	${2}
};${0}
endsnippet

# }}}

# Input/Output ============================================================{{{

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}${0}
endsnippet

snippet fscanf "fscanf ..."
fscanf(${1:stderr}, "${2:%s}"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}${0}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}${0}
endsnippet

snippet scanf "scanf .. (scanf)"
scanf("${1:%s}"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}${0}
endsnippet
# }}}

# vim:ft=snippets foldmethod=marker:
