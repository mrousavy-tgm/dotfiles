!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AltMask	config.h	59;"	d
Arg	dwm.c	/^} Arg;$/;"	t	typeref:union:__anon7	file:
BETWEEN	util.h	5;"	d
BUTTONMASK	dwm.c	50;"	d	file:
Button	dwm.c	/^} Button;$/;"	t	typeref:struct:__anon8	file:
CC	config.mk	/^CC = cc$/;"	m
CFLAGS	config.mk	/^CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -Os ${INCS} ${CPPFLAGS}$/;"	m
CLEANMASK	dwm.c	51;"	d	file:
CPPFLAGS	config.mk	/^CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=2 -DVERSION=\\"${VERSION}\\" ${XINERAMAFLAGS}$/;"	m
Client	dwm.c	/^struct Client {$/;"	s	file:
Client	dwm.c	/^typedef struct Client Client;$/;"	t	typeref:struct:Client	file:
ClkClientWin	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon6	file:
ClkLast	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon6	file:
ClkLtSymbol	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon6	file:
ClkRootWin	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon6	file:
ClkStatusText	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon6	file:
ClkTagBar	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon6	file:
ClkWinTitle	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon6	file:
ColBackground	dwm.c	61;"	d	file:
ColBg	drw.h	/^enum { ColFg, ColBg, ColCount }; \/* Scm index *\/$/;"	e	enum:__anon13
ColBorder	dwm.c	62;"	d	file:
ColCount	drw.h	/^enum { ColFg, ColBg, ColCount }; \/* Scm index *\/$/;"	e	enum:__anon13
ColFg	drw.h	/^enum { ColFg, ColBg, ColCount }; \/* Scm index *\/$/;"	e	enum:__anon13
Cur	drw.h	/^} Cur;$/;"	t	typeref:struct:__anon12
CurLast	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon1	file:
CurMove	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon1	file:
CurNormal	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon1	file:
CurResize	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon1	file:
Drw	drw.h	/^} Drw;$/;"	t	typeref:struct:__anon14
FREETYPEINC	config.mk	/^FREETYPEINC = \/usr\/include\/freetype2$/;"	m
FREETYPELIBS	config.mk	/^FREETYPELIBS = -lfontconfig -lXft$/;"	m
Fnt	drw.h	/^typedef struct Fnt {$/;"	s
Fnt	drw.h	/^} Fnt;$/;"	t	typeref:struct:Fnt
HEIGHT	dwm.c	58;"	d	file:
INCS	config.mk	/^INCS = -I${X11INC} -I${FREETYPEINC}$/;"	m
INTERSECT	dwm.c	52;"	d	file:
ISVISIBLE	dwm.c	54;"	d	file:
Key	dwm.c	/^} Key;$/;"	t	typeref:struct:__anon9	file:
LDFLAGS	config.mk	/^LDFLAGS  = -s ${LIBS}$/;"	m
LENGTH	dwm.c	55;"	d	file:
LIBS	config.mk	/^LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lX11-xcb -lxcb -lxcb-res$/;"	m
Layout	dwm.c	/^} Layout;$/;"	t	typeref:struct:__anon10	file:
MANPREFIX	config.mk	/^MANPREFIX = ${PREFIX}\/share\/man$/;"	m
MAX	util.h	3;"	d
MIN	util.h	4;"	d
MODKEY	config.h	60;"	d
MOUSEMASK	dwm.c	56;"	d	file:
Manager	dwm.c	/^enum { Manager, Xembed, XembedInfo, XLast }; \/* Xembed atoms *\/$/;"	e	enum:__anon4	file:
Monitor	dwm.c	/^struct Monitor {$/;"	s	file:
Monitor	dwm.c	/^typedef struct Monitor Monitor;$/;"	t	typeref:struct:Monitor	file:
NetActiveWindow	dwm.c	/^	   NetWMName, NetWMState, NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon3	file:
NetClientList	dwm.c	/^	   NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon3	file:
NetLast	dwm.c	/^	   NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon3	file:
NetSupported	dwm.c	/^enum { NetSupported, NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation,$/;"	e	enum:__anon3	file:
NetSystemTray	dwm.c	/^enum { NetSupported, NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation,$/;"	e	enum:__anon3	file:
NetSystemTrayOP	dwm.c	/^enum { NetSupported, NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation,$/;"	e	enum:__anon3	file:
NetSystemTrayOrientation	dwm.c	/^enum { NetSupported, NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation,$/;"	e	enum:__anon3	file:
NetWMFullscreen	dwm.c	/^	   NetWMName, NetWMState, NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon3	file:
NetWMName	dwm.c	/^	   NetWMName, NetWMState, NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon3	file:
NetWMState	dwm.c	/^	   NetWMName, NetWMState, NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon3	file:
NetWMWindowType	dwm.c	/^	   NetWMName, NetWMState, NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon3	file:
NetWMWindowTypeDialog	dwm.c	/^	   NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon3	file:
NumTags	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	s	file:
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
PREFIX	config.mk	/^PREFIX = \/usr\/local$/;"	m
Pertag	dwm.c	/^struct Pertag {$/;"	s	file:
Pertag	dwm.c	/^typedef struct Pertag Pertag;$/;"	t	typeref:struct:Pertag	file:
Rule	dwm.c	/^} Rule;$/;"	t	typeref:struct:__anon11	file:
SHCMD	config.h	68;"	d
SRC	Makefile	/^SRC = drw.c dwm.c util.c$/;"	m
SYSTEM_TRAY_REQUEST_DOCK	dwm.c	64;"	d	file:
SchemeLast	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon2	file:
SchemeNorm	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon2	file:
SchemeSel	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon2	file:
Scm	drw.h	/^typedef XftColor *Scm;$/;"	t
Systray	dwm.c	/^struct Systray {$/;"	s	file:
Systray	dwm.c	/^typedef struct Systray   Systray;$/;"	t	typeref:struct:Systray	file:
TAGKEYS	config.h	61;"	d
TAGMASK	dwm.c	59;"	d	file:
TEXTW	dwm.c	60;"	d	file:
UTF_INVALID	drw.c	11;"	d	file:
UTF_SIZ	drw.c	12;"	d	file:
VERSION	config.mk	/^VERSION = 6.1$/;"	m
VERSION_MAJOR	dwm.c	77;"	d	file:
VERSION_MINOR	dwm.c	78;"	d	file:
WIDTH	dwm.c	57;"	d	file:
WMDelete	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon5	file:
WMLast	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon5	file:
WMProtocols	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon5	file:
WMState	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon5	file:
WMTakeFocus	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon5	file:
X11INC	config.mk	/^X11INC = \/usr\/X11R6\/include$/;"	m
X11LIB	config.mk	/^X11LIB = \/usr\/X11R6\/lib$/;"	m
XEMBED_EMBEDDED_NOTIFY	dwm.c	68;"	d	file:
XEMBED_EMBEDDED_VERSION	dwm.c	79;"	d	file:
XEMBED_FOCUS_IN	dwm.c	70;"	d	file:
XEMBED_MAPPED	dwm.c	73;"	d	file:
XEMBED_MODALITY_ON	dwm.c	71;"	d	file:
XEMBED_WINDOW_ACTIVATE	dwm.c	69;"	d	file:
XEMBED_WINDOW_ACTIVATE	dwm.c	74;"	d	file:
XEMBED_WINDOW_DEACTIVATE	dwm.c	75;"	d	file:
XINERAMAFLAGS	config.mk	/^XINERAMAFLAGS = -DXINERAMA$/;"	m
XINERAMALIBS	config.mk	/^XINERAMALIBS  = -lXinerama$/;"	m
XLast	dwm.c	/^enum { Manager, Xembed, XembedInfo, XLast }; \/* Xembed atoms *\/$/;"	e	enum:__anon4	file:
Xembed	dwm.c	/^enum { Manager, Xembed, XembedInfo, XLast }; \/* Xembed atoms *\/$/;"	e	enum:__anon4	file:
XembedInfo	dwm.c	/^enum { Manager, Xembed, XembedInfo, XLast }; \/* Xembed atoms *\/$/;"	e	enum:__anon4	file:
_NET_SYSTEM_TRAY_ORIENTATION_HORZ	dwm.c	65;"	d	file:
applyrules	dwm.c	/^applyrules(Client *c)$/;"	f
applysizehints	dwm.c	/^applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact)$/;"	f
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon8	file:
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon9	file:
arrange	dwm.c	/^	void (*arrange)(Monitor *);$/;"	m	struct:__anon10	file:
arrange	dwm.c	/^arrange(Monitor *m)$/;"	f
arrangemon	dwm.c	/^arrangemon(Monitor *m)$/;"	f
attach	dwm.c	/^attach(Client *c)$/;"	f
attachstack	dwm.c	/^attachstack(Client *c)$/;"	f
barwin	dwm.c	/^	Window barwin;$/;"	m	struct:Monitor	file:
baseh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
basew	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
bh	dwm.c	/^static int bh, blw = 0;      \/* bar geometry *\/$/;"	v	file:
black	config.h	/^static const char black[]                = "#282828";$/;"	v
blw	dwm.c	/^static int bh, blw = 0;      \/* bar geometry *\/$/;"	v	file:
borderpx	config.h	/^static const unsigned int borderpx       = 1;        \/* border pixel of windows *\/$/;"	v
broken	dwm.c	/^static const char broken[] = "broken";$/;"	v	file:
browsercmd	config.h	/^static const char *browsercmd[]  = { "google-chrome-stable", NULL }; $/;"	v
button	dwm.c	/^	unsigned int button;$/;"	m	struct:__anon8	file:
buttonpress	dwm.c	/^buttonpress(XEvent *e)$/;"	f
buttons	config.h	/^static Button buttons[] = {$/;"	v
bw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	file:
by	dwm.c	/^	int by;               \/* bar geometry *\/$/;"	m	struct:Monitor	file:
checkotherwm	dwm.c	/^checkotherwm(void)$/;"	f
class	dwm.c	/^	const char *class;$/;"	m	struct:__anon11	file:
cleanup	dwm.c	/^cleanup(void)$/;"	f
cleanupmon	dwm.c	/^cleanupmon(Monitor *mon)$/;"	f
clearurgent	dwm.c	/^clearurgent(Client *c)$/;"	f
click	dwm.c	/^	unsigned int click;$/;"	m	struct:__anon8	file:
clientmessage	dwm.c	/^clientmessage(XEvent *e)$/;"	f
clients	dwm.c	/^	Client *clients;$/;"	m	struct:Monitor	file:
colors	config.h	/^static const char *colors[SchemeLast][3] = {$/;"	v
configure	dwm.c	/^configure(Client *c)$/;"	f
configurenotify	dwm.c	/^configurenotify(XEvent *e)$/;"	f
configurerequest	dwm.c	/^configurerequest(XEvent *e)$/;"	f
createmon	dwm.c	/^createmon(void)$/;"	f
cursor	drw.h	/^	Cursor cursor;$/;"	m	struct:__anon12
cursor	dwm.c	/^static Cur *cursor[CurLast];$/;"	v	file:
curtag	dwm.c	/^	unsigned int curtag, prevtag; \/* current and previous tag *\/$/;"	m	struct:Pertag	file:
cycle	dwm.c	/^cycle(const Arg *arg) $/;"	f
destroynotify	dwm.c	/^destroynotify(XEvent *e)$/;"	f
detach	dwm.c	/^detach(Client *c)$/;"	f
detachstack	dwm.c	/^detachstack(Client *c)$/;"	f
die	util.c	/^die(const char *fmt, ...) {$/;"	f
dmenucmd	config.h	/^static const char *dmenucmd[] = { "dmenu_run", "-fn", dmenufont, "-nb", "#002b36", "-nf", "#568e75", "-sb", "#002b36", "-sf", "#268bd2", "-h", "22", NULL }; $/;"	v
dmenufont	config.h	/^static const char dmenufont[] = "Meslo LG M for Powerline-8";$/;"	v
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:Fnt
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:__anon14
dpy	dwm.c	/^static Display *dpy;$/;"	v	file:
drawable	drw.h	/^	Drawable drawable;$/;"	m	struct:__anon14
drawbar	dwm.c	/^drawbar(Monitor *m)$/;"	f
drawbars	dwm.c	/^drawbars(void)$/;"	f
drw	dwm.c	/^static Drw *drw;$/;"	v	file:
drw_clr_create	drw.c	/^drw_clr_create(Drw *drw, XftColor *dest, const char *clrname)$/;"	f
drw_create	drw.c	/^drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h)$/;"	f
drw_cur_create	drw.c	/^drw_cur_create(Drw *drw, int shape)$/;"	f
drw_cur_free	drw.c	/^drw_cur_free(Drw *drw, Cur *cursor)$/;"	f
drw_font_getexts	drw.c	/^drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned int *w, unsigned int *h)$/;"	f
drw_fontset_create	drw.c	/^drw_fontset_create(Drw* drw, const char *fonts[], size_t fontcount)$/;"	f
drw_fontset_free	drw.c	/^drw_fontset_free(Fnt *font)$/;"	f
drw_fontset_getwidth	drw.c	/^drw_fontset_getwidth(Drw *drw, const char *text)$/;"	f
drw_free	drw.c	/^drw_free(Drw *drw)$/;"	f
drw_map	drw.c	/^drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h)$/;"	f
drw_rect	drw.c	/^drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert)$/;"	f
drw_resize	drw.c	/^drw_resize(Drw *drw, unsigned int w, unsigned int h)$/;"	f
drw_scm_create	drw.c	/^drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount)$/;"	f
drw_setfontset	drw.c	/^drw_setfontset(Drw *drw, Fnt *set)$/;"	f
drw_setscheme	drw.c	/^drw_setscheme(Drw *drw, Scm scm)$/;"	f
drw_text	drw.c	/^drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lpad, const char *text, int invert)$/;"	f
ecalloc	util.c	/^ecalloc(size_t nmemb, size_t size)$/;"	f
editorcmd	config.h	/^static const char *editorcmd[]  = { "subl3", NULL }; $/;"	v
enternotify	dwm.c	/^enternotify(XEvent *e)$/;"	f
expose	dwm.c	/^expose(XEvent *e)$/;"	f
f	dwm.c	/^	float f;$/;"	m	union:__anon7	file:
focus	dwm.c	/^focus(Client *c)$/;"	f
focusin	dwm.c	/^focusin(XEvent *e)$/;"	f
focusstack	dwm.c	/^focusstack(const Arg *arg)$/;"	f
fonts	config.h	/^static const char *fonts[] = {$/;"	v
fonts	drw.h	/^	Fnt *fonts;$/;"	m	struct:__anon14
func	dwm.c	/^	void (*func)(const Arg *);$/;"	m	struct:__anon9	file:
func	dwm.c	/^	void (*func)(const Arg *arg);$/;"	m	struct:__anon8	file:
gappx	config.h	/^static const unsigned int gappx          = 5;$/;"	v
gc	drw.h	/^	GC gc;$/;"	m	struct:__anon14
getatomprop	dwm.c	/^getatomprop(Client *c, Atom prop)$/;"	f
getparentprocess	dwm.c	/^getparentprocess(pid_t p)$/;"	f
getrootptr	dwm.c	/^getrootptr(int *x, int *y)$/;"	f
getstate	dwm.c	/^getstate(Window w)$/;"	f
getsystraywidth	dwm.c	/^getsystraywidth() {$/;"	f
gettextprop	dwm.c	/^gettextprop(Window w, Atom atom, char *text, unsigned int size)$/;"	f
grabbuttons	dwm.c	/^grabbuttons(Client *c, int focused)$/;"	f
grabkeys	dwm.c	/^grabkeys(void)$/;"	f
gray	config.h	/^static const char gray[]                 = "#a89984";$/;"	v
h	drw.h	/^	unsigned int h;$/;"	m	struct:Fnt
h	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon14
h	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
handler	dwm.c	/^static void (*handler[LASTEvent]) (XEvent *) = {$/;"	v	file:
i	dwm.c	/^	int i;$/;"	m	union:__anon7	file:
icons	dwm.c	/^	Client *icons;$/;"	m	struct:Systray	file:
inch	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
incnmaster	dwm.c	/^incnmaster(const Arg *arg)$/;"	f
incw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
instance	dwm.c	/^	const char *instance;$/;"	m	struct:__anon11	file:
isdescprocess	dwm.c	/^isdescprocess(pid_t p, pid_t c)$/;"	f
isfixed	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, isterminal, noswallow;$/;"	m	struct:Client	file:
isfloating	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, isterminal, noswallow;$/;"	m	struct:Client	file:
isfloating	dwm.c	/^	int isfloating;$/;"	m	struct:__anon11	file:
isfullscreen	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, isterminal, noswallow;$/;"	m	struct:Client	file:
isterminal	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, isterminal, noswallow;$/;"	m	struct:Client	file:
isterminal	dwm.c	/^	int isterminal;$/;"	m	struct:__anon11	file:
isuniquegeom	dwm.c	/^isuniquegeom(XineramaScreenInfo *unique, size_t n, XineramaScreenInfo *info)$/;"	f	file:
isurgent	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, isterminal, noswallow;$/;"	m	struct:Client	file:
keypress	dwm.c	/^keypress(XEvent *e)$/;"	f
keys	config.h	/^static Key keys[] = {$/;"	v
keysym	dwm.c	/^	KeySym keysym;$/;"	m	struct:__anon9	file:
killclient	dwm.c	/^killclient(const Arg *arg)$/;"	f
layoutaxis	config.h	/^static const int  layoutaxis[] = {$/;"	v
layouts	config.h	/^static const Layout layouts[] = {$/;"	v
limitexceeded	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	m	struct:NumTags	file:
lrpad	dwm.c	/^static int lrpad;            \/* sum of left and right padding for text *\/$/;"	v	file:
lt	dwm.c	/^	const Layout *lt;$/;"	m	struct:Monitor	file:
ltaxes	dwm.c	/^	int ltaxes[LENGTH(tags) + 1][3];$/;"	m	struct:Pertag	file:
ltaxis	dwm.c	/^	int ltaxis[3];$/;"	m	struct:Monitor	file:
ltidxs	dwm.c	/^	const Layout *ltidxs[LENGTH(tags) + 1]; \/* matrix of tags and layouts  *\/$/;"	m	struct:Pertag	file:
ltsymbol	dwm.c	/^	char ltsymbol[16];$/;"	m	struct:Monitor	file:
main	dwm.c	/^main(int argc, char *argv[])$/;"	f
main	transient.c	/^int main(void) {$/;"	f
manage	dwm.c	/^manage(Window w, XWindowAttributes *wa)$/;"	f
mappingnotify	dwm.c	/^mappingnotify(XEvent *e)$/;"	f
maprequest	dwm.c	/^maprequest(XEvent *e)$/;"	f
mask	dwm.c	/^	unsigned int mask;$/;"	m	struct:__anon8	file:
maxa	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	file:
maxh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
maxw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
mfact	config.h	/^static const float mfact     = 0.5; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfact	dwm.c	/^	float mfact;$/;"	m	struct:Monitor	file:
mfacts	dwm.c	/^	float mfacts[LENGTH(tags) + 1]; \/* mfacts per tag *\/$/;"	m	struct:Pertag	file:
mh	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
mina	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	file:
minh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
minw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
mirrorlayout	dwm.c	/^mirrorlayout(const Arg *arg) {$/;"	f
mod	dwm.c	/^	unsigned int mod;$/;"	m	struct:__anon9	file:
mon	dwm.c	/^	Monitor *mon;$/;"	m	struct:Client	file:
monitor	dwm.c	/^	int monitor;$/;"	m	struct:__anon11	file:
monocle	dwm.c	/^monocle(Monitor *m)$/;"	f
mons	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	file:
motionnotify	dwm.c	/^motionnotify(XEvent *e)$/;"	f
movemouse	dwm.c	/^movemouse(const Arg *arg)$/;"	f
moveresize	moveresize.c	/^static void moveresize(const Arg *arg) {$/;"	f	file:
movestack	dwm.c	/^movestack(const Arg *arg) {$/;"	f
movestack	movestack.c	/^movestack(const Arg *arg) {$/;"	f
mw	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
mx	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
my	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
name	dwm.c	/^	char name[256];$/;"	m	struct:Client	file:
netatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast], xatom[XLast];$/;"	v	file:
neverfocus	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, isterminal, noswallow;$/;"	m	struct:Client	file:
next	drw.h	/^	struct Fnt *next;$/;"	m	struct:Fnt	typeref:struct:Fnt::Fnt
next	dwm.c	/^	Client *next;$/;"	m	struct:Client	file:
next	dwm.c	/^	Monitor *next;$/;"	m	struct:Monitor	file:
nexttiled	dwm.c	/^nexttiled(Client *c)$/;"	f
nmaster	config.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v
nmaster	dwm.c	/^	int nmaster;$/;"	m	struct:Monitor	file:
nmasters	dwm.c	/^	int nmasters[LENGTH(tags) + 1]; \/* number of windows in master area *\/$/;"	m	struct:Pertag	file:
noswallow	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, isterminal, noswallow;$/;"	m	struct:Client	file:
noswallow	dwm.c	/^	int noswallow;$/;"	m	struct:__anon11	file:
num	dwm.c	/^	int num;$/;"	m	struct:Monitor	file:
numlockmask	dwm.c	/^static unsigned int numlockmask = 0;$/;"	v	file:
oldbw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	file:
oldh	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldstate	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, isterminal, noswallow;$/;"	m	struct:Client	file:
oldw	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldx	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldy	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
pattern	drw.h	/^	FcPattern *pattern;$/;"	m	struct:Fnt
pertag	dwm.c	/^	Pertag *pertag;$/;"	m	struct:Monitor	file:
pid	dwm.c	/^	pid_t pid;$/;"	m	struct:Client	file:
pop	dwm.c	/^pop(Client *c)$/;"	f
prevtag	dwm.c	/^	unsigned int curtag, prevtag; \/* current and previous tag *\/$/;"	m	struct:Pertag	file:
prevzooms	dwm.c	/^	Client *prevzooms[LENGTH(tags) + 1]; \/* store zoom information *\/$/;"	m	struct:Pertag	file:
propertynotify	dwm.c	/^propertynotify(XEvent *e)$/;"	f
quit	dwm.c	/^quit(const Arg *arg)$/;"	f
recttomon	dwm.c	/^recttomon(int x, int y, int w, int h)$/;"	f
removesystrayicon	dwm.c	/^removesystrayicon(Client *i) {$/;"	f
resize	dwm.c	/^resize(Client *c, int x, int y, int w, int h, int interact)$/;"	f
resizebarwin	dwm.c	/^resizebarwin(Monitor *m) {$/;"	f
resizeclient	dwm.c	/^resizeclient(Client *c, int x, int y, int w, int h)$/;"	f
resizehints	config.h	/^static const int resizehints = 1;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v
resizemouse	dwm.c	/^resizemouse(const Arg *arg)$/;"	f
resizerequest	dwm.c	/^resizerequest(XEvent *e) {$/;"	f
restack	dwm.c	/^restack(Monitor *m)$/;"	f
root	drw.h	/^	Window root;$/;"	m	struct:__anon14
root	dwm.c	/^static Window root;$/;"	v	file:
rotatelayoutaxis	dwm.c	/^rotatelayoutaxis(const Arg *arg) {$/;"	f
rules	config.h	/^static const Rule rules[] = {$/;"	v
run	dwm.c	/^run(void)$/;"	f
running	dwm.c	/^static int running = 1;$/;"	v	file:
scan	dwm.c	/^scan(void)$/;"	f
scheme	drw.h	/^	Scm scheme;$/;"	m	struct:__anon14
scheme	dwm.c	/^static Scm scheme[SchemeLast];$/;"	v	file:
screen	drw.h	/^	int screen;$/;"	m	struct:__anon14
screen	dwm.c	/^static int screen;$/;"	v	file:
sel	dwm.c	/^	Client *sel;$/;"	m	struct:Monitor	file:
selmon	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	file:
seltags	dwm.c	/^	unsigned int seltags;$/;"	m	struct:Monitor	file:
sendevent	dwm.c	/^sendevent(Window w, Atom proto, int mask, long d0, long d1, long d2, long d3, long d4)$/;"	f
sendmon	dwm.c	/^sendmon(Client *c, Monitor *m)$/;"	f
setclientstate	dwm.c	/^setclientstate(Client *c, long state)$/;"	f
setfocus	dwm.c	/^setfocus(Client *c)$/;"	f
setfullscreen	dwm.c	/^setfullscreen(Client *c, int fullscreen)$/;"	f
setlayout	dwm.c	/^setlayout(const Arg *arg)$/;"	f
setmfact	dwm.c	/^setmfact(const Arg *arg)$/;"	f
setup	dwm.c	/^setup(void)$/;"	f
sfh	dwm.c	/^	int sfx, sfy, sfw, sfh; \/* stored float geometry, used on mode revert *\/$/;"	m	struct:Client	file:
sfw	dwm.c	/^	int sfx, sfy, sfw, sfh; \/* stored float geometry, used on mode revert *\/$/;"	m	struct:Client	file:
sfx	dwm.c	/^	int sfx, sfy, sfw, sfh; \/* stored float geometry, used on mode revert *\/$/;"	m	struct:Client	file:
sfy	dwm.c	/^	int sfx, sfy, sfw, sfh; \/* stored float geometry, used on mode revert *\/$/;"	m	struct:Client	file:
sh	dwm.c	/^static int sw, sh;           \/* X display screen geometry width, height *\/$/;"	v	file:
shifttag	dwm.c	/^shifttag(int dist) {$/;"	f
showbar	config.h	/^static const int showbar                 = 1;        \/* 0 means no bar *\/$/;"	v
showbar	dwm.c	/^	int showbar;$/;"	m	struct:Monitor	file:
showhide	dwm.c	/^showhide(Client *c)$/;"	f
showsystray	config.h	/^static const int showsystray             = 1;        \/* 0 means no systray *\/$/;"	v
sigchld	dwm.c	/^sigchld(int unused)$/;"	f
snap	config.h	/^static const unsigned int snap           = 16;       \/* snap pixel *\/$/;"	v
snext	dwm.c	/^	Client *snext;$/;"	m	struct:Client	file:
spawn	dwm.c	/^spawn(const Arg *arg)$/;"	f
stack	dwm.c	/^	Client *stack;$/;"	m	struct:Monitor	file:
stext	dwm.c	/^static char stext[256];$/;"	v	file:
sw	dwm.c	/^static int sw, sh;           \/* X display screen geometry width, height *\/$/;"	v	file:
swallow	dwm.c	/^swallow(Client *p, Client *c)$/;"	f
swallowing	dwm.c	/^	Client *swallowing;$/;"	m	struct:Client	file:
swallowingclient	dwm.c	/^swallowingclient(Window w)$/;"	f
symbol	dwm.c	/^	const char *symbol;$/;"	m	struct:__anon10	file:
systray	dwm.c	/^static Systray *systray = NULL;$/;"	v	file:
systrayorientation	dwm.c	/^static unsigned long systrayorientation = _NET_SYSTEM_TRAY_ORIENTATION_HORZ;$/;"	v	file:
systraypinning	config.h	/^static const unsigned int systraypinning = 1;   \/* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X *\/$/;"	v
systraypinningfailfirst	config.h	/^static const int systraypinningfailfirst = 1;   \/* 1: if pinning fails, display systray on the first monitor, 0: display systray on the last monitor*\/$/;"	v
systrayspacing	config.h	/^static const unsigned int systrayspacing = 2;   \/* systray spacing *\/$/;"	v
systraytomon	dwm.c	/^systraytomon(Monitor *m) {$/;"	f
tag	dwm.c	/^tag(const Arg *arg)$/;"	f
tagcycle	dwm.c	/^tagcycle(const Arg *arg) {$/;"	f
tags	config.h	/^static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };$/;"	v
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:Client	file:
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:__anon11	file:
tagset	dwm.c	/^	unsigned int tagset[2];$/;"	m	struct:Monitor	file:
termcmd	config.h	/^static const char *termcmd[]  = { "termite", NULL };$/;"	v
termforwin	dwm.c	/^termforwin(const Client *w)$/;"	f
tile	dwm.c	/^tile(Monitor *m)$/;"	f
title	dwm.c	/^	const char *title;$/;"	m	struct:__anon11	file:
togglebar	dwm.c	/^togglebar(const Arg *arg)$/;"	f
togglefloating	dwm.c	/^togglefloating(const Arg *arg)$/;"	f
toggletag	dwm.c	/^toggletag(const Arg *arg)$/;"	f
toggleview	dwm.c	/^toggleview(const Arg *arg)$/;"	f
topbar	config.h	/^static const int topbar                  = 1;        \/* 0 means bottom bar *\/$/;"	v
topbar	dwm.c	/^	int topbar;$/;"	m	struct:Monitor	file:
ui	dwm.c	/^	unsigned int ui;$/;"	m	union:__anon7	file:
unfocus	dwm.c	/^unfocus(Client *c, int setfocus)$/;"	f
unmanage	dwm.c	/^unmanage(Client *c, int destroyed)$/;"	f
unmapnotify	dwm.c	/^unmapnotify(XEvent *e)$/;"	f
unswallow	dwm.c	/^unswallow(Client *c)$/;"	f
updatebarpos	dwm.c	/^updatebarpos(Monitor *m)$/;"	f
updatebars	dwm.c	/^updatebars(void)$/;"	f
updateclientlist	dwm.c	/^updateclientlist()$/;"	f
updategeom	dwm.c	/^updategeom(void)$/;"	f
updatenumlockmask	dwm.c	/^updatenumlockmask(void)$/;"	f
updatesizehints	dwm.c	/^updatesizehints(Client *c)$/;"	f
updatestatus	dwm.c	/^updatestatus(void)$/;"	f
updatesystray	dwm.c	/^updatesystray(void) {$/;"	f
updatesystrayicongeom	dwm.c	/^updatesystrayicongeom(Client *i, int w, int h) {$/;"	f
updatesystrayiconstate	dwm.c	/^updatesystrayiconstate(Client *i, XPropertyEvent *ev) {$/;"	f
updatetitle	dwm.c	/^updatetitle(Client *c)$/;"	f
updatewindowtype	dwm.c	/^updatewindowtype(Client *c)$/;"	f
updatewmhints	dwm.c	/^updatewmhints(Client *c)$/;"	f
utf8decode	drw.c	/^utf8decode(const char *c, long *u, size_t clen)$/;"	f	file:
utf8decodebyte	drw.c	/^utf8decodebyte(const char c, size_t *i)$/;"	f	file:
utf8validate	drw.c	/^utf8validate(long *u, size_t i)$/;"	f	file:
utfbyte	drw.c	/^static const unsigned char utfbyte[UTF_SIZ + 1] = {0x80,    0, 0xC0, 0xE0, 0xF0};$/;"	v	file:
utfmask	drw.c	/^static const unsigned char utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};$/;"	v	file:
utfmax	drw.c	/^static const long utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};$/;"	v	file:
utfmin	drw.c	/^static const long utfmin[UTF_SIZ + 1] = {       0,    0,  0x80,  0x800,  0x10000};$/;"	v	file:
v	dwm.c	/^	const void *v;$/;"	m	union:__anon7	file:
view	dwm.c	/^view(const Arg *arg)$/;"	f
viewontag	config.h	/^static const Bool viewontag              = True;$/;"	v
w	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon14
w	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
warp	dwm.c	/^warp(const Client *c)$/;"	f
wh	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
white	config.h	/^static const char white[]                = "#fbf1c7";$/;"	v
win	dwm.c	/^	Window win;$/;"	m	struct:Client	file:
win	dwm.c	/^	Window win;$/;"	m	struct:Systray	file:
winpid	dwm.c	/^winpid(Window w)$/;"	f
wintoclient	dwm.c	/^wintoclient(Window w)$/;"	f
wintomon	dwm.c	/^wintomon(Window w)$/;"	f
wintosystrayicon	dwm.c	/^wintosystrayicon(Window w) {$/;"	f
wmatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast], xatom[XLast];$/;"	v	file:
ww	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
wx	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
wy	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
x	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
xatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast], xatom[XLast];$/;"	v	file:
xcon	dwm.c	/^static xcb_connection_t *xcon;$/;"	v	file:
xerror	dwm.c	/^xerror(Display *dpy, XErrorEvent *ee)$/;"	f
xerrordummy	dwm.c	/^xerrordummy(Display *dpy, XErrorEvent *ee)$/;"	f
xerrorstart	dwm.c	/^xerrorstart(Display *dpy, XErrorEvent *ee)$/;"	f
xerrorxlib	dwm.c	/^static int (*xerrorxlib)(Display *, XErrorEvent *);$/;"	v	file:
xfont	drw.h	/^	XftFont *xfont;$/;"	m	struct:Fnt
xfont_create	drw.c	/^xfont_create(Drw *drw, const char *fontname, FcPattern *fontpattern)$/;"	f	file:
xfont_free	drw.c	/^xfont_free(Fnt *font)$/;"	f	file:
y	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
zoom	dwm.c	/^zoom(const Arg *arg)$/;"	f
